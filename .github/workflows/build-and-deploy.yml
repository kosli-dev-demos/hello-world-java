name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  cancel-previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Bensing-Demos
    env:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
      KOSLI_ORG: ${{ secrets.KOSLI_ORG}}
      KOSLI_FLOW: unit-test-flow
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'all'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk.json

      - name: Build with Maven
        run: | 
          mvn clean install >> maven-logs.txt

      - name: Retrieve built .jar Path
        run: | 
          path=(./target/*.jar)
          echo "jarpath=$path" >> $GITHUB_ENV

      - name: COMPLIANCE REPORT - Report jar Creation
        run: |
          kosli report artifact ${{ env.jarpath }} \
            --artifact-type file \
            --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} \
            --commit-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB} \
            --git-commit ${GITHUB_SHA} \
            --org $KOSLI_ORG \
            --flow $KOSLI_FLOW \

      - name: COMPLIANCE REPORT - Control Validation | Unit Test & Evidence Upload
        run: |
          kosli report evidence artifact generic ${{ env.jarpath }} \
            --artifact-type file \
            --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} \
            --evidence-paths ./target/surefire-reports \
            --name unit-test \
            --org $KOSLI_ORG \
            --flow $KOSLI_FLOW \

      - name: COMPLIANCE REPORT - Control Validation | Source Code CVE & Evidence Upload
        run: |
          kosli report evidence artifact generic ${{ env.jarpath }} \
            --artifact-type file \
            --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} \
            --evidence-paths snyk.json \
            --name cve-source-code \
            --org $KOSLI_ORG \
            --flow $KOSLI_FLOW \

      - name: Login to GitHub Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-push-container-image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: COMPLIANCE REPORT - Control Validation | Container Metadata
        run: | 
          mkdir container-data
          echo "${{ steps.build-push-container-image.outputs.metadata }}" >> ./container-data/build-push-container-image-metadata.json
          echo "${{ steps.build-push-container-image.outputs.imageid }}" >> ./container-data/imageid
          echo "${{ steps.build-push-container-image.outputs.digest }}" >> ./container-data/digest

          kosli report evidence artifact generic ${{ env.jarpath }} \
            --artifact-type file \
            --build-url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} \
            --evidence-paths ./container-data \
            --name container-metadata \
            --org $KOSLI_ORG \
            --flow $KOSLI_FLOW \